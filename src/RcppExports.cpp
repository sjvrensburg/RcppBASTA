// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CenteredCusumValues
Rcpp::NumericVector CenteredCusumValues(const Rcpp::NumericVector& y);
RcppExport SEXP _RcppICSS_CenteredCusumValues(SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(CenteredCusumValues(y));
    return rcpp_result_gen;
END_RCPP
}
// check_critical_value
Rcpp::List check_critical_value(const Rcpp::NumericVector& Dk);
RcppExport SEXP _RcppICSS_check_critical_value(SEXP DkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type Dk(DkSEXP);
    rcpp_result_gen = Rcpp::wrap(check_critical_value(Dk));
    return rcpp_result_gen;
END_RCPP
}
// is_converged
bool is_converged(const Rcpp::IntegerVector& oldVec, const Rcpp::IntegerVector& newVec);
RcppExport SEXP _RcppICSS_is_converged(SEXP oldVecSEXP, SEXP newVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type oldVec(oldVecSEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type newVec(newVecSEXP);
    rcpp_result_gen = Rcpp::wrap(is_converged(oldVec, newVec));
    return rcpp_result_gen;
END_RCPP
}
// ICSS_step_1_and_2
Rcpp::IntegerVector ICSS_step_1_and_2(const Rcpp::NumericVector& x);
RcppExport SEXP _RcppICSS_ICSS_step_1_and_2(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(ICSS_step_1_and_2(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_RcppICSS_CenteredCusumValues", (DL_FUNC) &_RcppICSS_CenteredCusumValues, 1},
    {"_RcppICSS_check_critical_value", (DL_FUNC) &_RcppICSS_check_critical_value, 1},
    {"_RcppICSS_is_converged", (DL_FUNC) &_RcppICSS_is_converged, 2},
    {"_RcppICSS_ICSS_step_1_and_2", (DL_FUNC) &_RcppICSS_ICSS_step_1_and_2, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_RcppICSS(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
